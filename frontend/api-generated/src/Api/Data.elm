{-
   Mensam API
   This is an API for hot desk booking.

   The version of the OpenAPI document: 

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git

   DO NOT EDIT THIS FILE MANUALLY.

   For more info on generating Elm code, see https://eriktim.github.io/openapi-elm/
-}


module Api.Data exposing
    ( AccessibilitySpace(..), accessibilitySpaceVariants
    , Desk
    , DeskNameWithContext
    , DeskWithInfo
    , EmailAddress
    , ErrorBasicAuth(..), errorBasicAuthVariants
    , ErrorParseBodyJson
    , IdentifierDesk
    , IdentifierReservation
    , IdentifierSpace
    , IdentifierUser
    , IntervalUTCTime
    , JWT
    , NameOrIdentifierDeskNameWithContextIdentifierDesk(..), NameOrIdentifierDeskNameWithContextIdentifierDeskTag(..), nameOrIdentifierDeskNameWithContextIdentifierDeskTagVariants
    , NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf, NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag(..), nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagVariants
    , NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1, NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag(..), nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagVariants
    , NameOrIdentifierNameSpaceIdentifierSpace(..), NameOrIdentifierNameSpaceIdentifierSpaceTag(..), nameOrIdentifierNameSpaceIdentifierSpaceTagVariants
    , NameOrIdentifierNameSpaceIdentifierSpaceOneOf, NameOrIdentifierNameSpaceIdentifierSpaceOneOfTag(..), nameOrIdentifierNameSpaceIdentifierSpaceOneOfTagVariants
    , NameOrIdentifierNameSpaceIdentifierSpaceOneOf1, NameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag(..), nameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagVariants
    , OpenAPI
    , OrderByCategorySpaceOrderCategory
    , Order_(..), orderVariants
    , RequestDeskCreate
    , RequestDeskList
    , RequestRegister
    , RequestReservationCancel
    , RequestReservationCreate
    , RequestSpaceCreate
    , RequestSpaceJoin
    , RequestSpaceList
    , Reservation
    , ResponseDeskCreate
    , ResponseDeskList
    , ResponseLogin
    , ResponseProfile
    , ResponseReservationCancel
    , ResponseReservationCreate
    , ResponseSpaceCreate
    , ResponseSpaceJoin
    , ResponseSpaceList
    , Space
    , SpaceOrderCategory(..), spaceOrderCategoryVariants
    , StaticText(..), staticTextVariants
    , StatusReservation(..), statusReservationVariants
    , UTCTime
    , Username
    , VisibilitySpace(..), visibilitySpaceVariants
    , encodeAccessibilitySpace
    , encodeDesk
    , encodeDeskNameWithContext
    , encodeDeskWithInfo
    , encodeEmailAddress
    , encodeErrorBasicAuth
    , encodeErrorParseBodyJson
    , encodeIdentifierDesk
    , encodeIdentifierReservation
    , encodeIdentifierSpace
    , encodeIdentifierUser
    , encodeIntervalUTCTime
    , encodeJWT
    , encodeNameOrIdentifierDeskNameWithContextIdentifierDesk
    , encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf
    , encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1
    , encodeNameOrIdentifierNameSpaceIdentifierSpace
    , encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf
    , encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1
    , encodeOpenAPI
    , encodeOrderByCategorySpaceOrderCategory
    , encodeOrder
    , encodeRequestDeskCreate
    , encodeRequestDeskList
    , encodeRequestRegister
    , encodeRequestReservationCancel
    , encodeRequestReservationCreate
    , encodeRequestSpaceCreate
    , encodeRequestSpaceJoin
    , encodeRequestSpaceList
    , encodeReservation
    , encodeResponseDeskCreate
    , encodeResponseDeskList
    , encodeResponseLogin
    , encodeResponseProfile
    , encodeResponseReservationCancel
    , encodeResponseReservationCreate
    , encodeResponseSpaceCreate
    , encodeResponseSpaceJoin
    , encodeResponseSpaceList
    , encodeSpace
    , encodeSpaceOrderCategory
    , encodeStaticText
    , encodeStatusReservation
    , encodeUTCTime
    , encodeUsername
    , encodeVisibilitySpace
    , accessibilitySpaceDecoder
    , deskDecoder
    , deskNameWithContextDecoder
    , deskWithInfoDecoder
    , emailAddressDecoder
    , errorBasicAuthDecoder
    , errorParseBodyJsonDecoder
    , identifierDeskDecoder
    , identifierReservationDecoder
    , identifierSpaceDecoder
    , identifierUserDecoder
    , intervalUTCTimeDecoder
    , jWTDecoder
    , nameOrIdentifierDeskNameWithContextIdentifierDeskDecoder
    , nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfDecoder
    , nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Decoder
    , nameOrIdentifierNameSpaceIdentifierSpaceDecoder
    , nameOrIdentifierNameSpaceIdentifierSpaceOneOfDecoder
    , nameOrIdentifierNameSpaceIdentifierSpaceOneOf1Decoder
    , openAPIDecoder
    , orderByCategorySpaceOrderCategoryDecoder
    , orderDecoder
    , requestDeskCreateDecoder
    , requestDeskListDecoder
    , requestRegisterDecoder
    , requestReservationCancelDecoder
    , requestReservationCreateDecoder
    , requestSpaceCreateDecoder
    , requestSpaceJoinDecoder
    , requestSpaceListDecoder
    , reservationDecoder
    , responseDeskCreateDecoder
    , responseDeskListDecoder
    , responseLoginDecoder
    , responseProfileDecoder
    , responseReservationCancelDecoder
    , responseReservationCreateDecoder
    , responseSpaceCreateDecoder
    , responseSpaceJoinDecoder
    , responseSpaceListDecoder
    , spaceDecoder
    , spaceOrderCategoryDecoder
    , staticTextDecoder
    , statusReservationDecoder
    , uTCTimeDecoder
    , usernameDecoder
    , visibilitySpaceDecoder
    )

import Api
import Dict
import Json.Decode
import Json.Encode


-- MODEL


type AccessibilitySpace
    = AccessibilitySpaceJoinable
    | AccessibilitySpaceInaccessible


accessibilitySpaceVariants : List AccessibilitySpace
accessibilitySpaceVariants =
    [ AccessibilitySpaceJoinable
    , AccessibilitySpaceInaccessible
    ]


type alias Desk =
    { id : IdentifierDesk
    , name : String
    , space : IdentifierSpace
    }


type alias DeskNameWithContext =
    { desk : String
    , space : String
    }


type alias DeskWithInfo =
    { desk : Desk
    , reservations : List (Reservation)
    }


type alias EmailAddress =
    { }


type ErrorBasicAuth
    = ErrorBasicAuthUsername
    | ErrorBasicAuthPassword
    | ErrorBasicAuthIndefinite


errorBasicAuthVariants : List ErrorBasicAuth
errorBasicAuthVariants =
    [ ErrorBasicAuthUsername
    , ErrorBasicAuthPassword
    , ErrorBasicAuthIndefinite
    ]


type alias ErrorParseBodyJson =
    { error : String
    }


type alias IdentifierDesk =
    { unIdentifierDesk : Int
    }


type alias IdentifierReservation =
    { unIdentifierReservation : Int
    }


type alias IdentifierSpace =
    { unIdentifierSpace : Int
    }


type alias IdentifierUser =
    { unIdentifierUser : Int
    }


{-| An ordered interval: `start <= end`
-}
type alias IntervalUTCTime =
    { end : String
    , start : String
    }


type alias JWT =
    { }


type NameOrIdentifierDeskNameWithContextIdentifierDesk
    = NameOrIdentifierDeskNameWithContextIdentifierDeskNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf
    | NameOrIdentifierDeskNameWithContextIdentifierDeskNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1



type alias NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf =
    { tag : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag
    , value : DeskNameWithContext
    }


type NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag
    = NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagName


nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagVariants : List NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag
nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagVariants =
    [ NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagName
    ]


type alias NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 =
    { tag : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag
    , value : IdentifierDesk
    }


type NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag
    = NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagIdentifier


nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagVariants : List NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag
nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagVariants =
    [ NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagIdentifier
    ]


type NameOrIdentifierNameSpaceIdentifierSpace
    = NameOrIdentifierNameSpaceIdentifierSpaceNameOrIdentifierNameSpaceIdentifierSpaceOneOf NameOrIdentifierNameSpaceIdentifierSpaceOneOf
    | NameOrIdentifierNameSpaceIdentifierSpaceNameOrIdentifierNameSpaceIdentifierSpaceOneOf1 NameOrIdentifierNameSpaceIdentifierSpaceOneOf1



type alias NameOrIdentifierNameSpaceIdentifierSpaceOneOf =
    { tag : NameOrIdentifierNameSpaceIdentifierSpaceOneOfTag
    , value : String
    }


type NameOrIdentifierNameSpaceIdentifierSpaceOneOfTag
    = NameOrIdentifierNameSpaceIdentifierSpaceOneOfTagName


nameOrIdentifierNameSpaceIdentifierSpaceOneOfTagVariants : List NameOrIdentifierNameSpaceIdentifierSpaceOneOfTag
nameOrIdentifierNameSpaceIdentifierSpaceOneOfTagVariants =
    [ NameOrIdentifierNameSpaceIdentifierSpaceOneOfTagName
    ]


type alias NameOrIdentifierNameSpaceIdentifierSpaceOneOf1 =
    { tag : NameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag
    , value : IdentifierSpace
    }


type NameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag
    = NameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagIdentifier


nameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagVariants : List NameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag
nameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagVariants =
    [ NameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagIdentifier
    ]


type alias OpenAPI =
    { }


type alias OrderByCategorySpaceOrderCategory =
    { category : SpaceOrderCategory
    , order : Order_
    }


type Order_
    = Order_Ascending
    | Order_Descending


orderVariants : List Order_
orderVariants =
    [ Order_Ascending
    , Order_Descending
    ]


type alias RequestDeskCreate =
    { name : String
    , space : NameOrIdentifierNameSpaceIdentifierSpace
    }


type alias RequestDeskList =
    { space : NameOrIdentifierNameSpaceIdentifierSpace
    , timebegin : Maybe String
    , timeend : Maybe String
    }


type alias RequestRegister =
    { email : String
    , emailvisible : Bool
    , name : String
    , password : String
    }


type alias RequestReservationCancel =
    { id : IdentifierReservation
    }


type alias RequestReservationCreate =
    { desk : NameOrIdentifierDeskNameWithContextIdentifierDesk
    , timewindow : IntervalUTCTime
    }


type alias RequestSpaceCreate =
    { accessibility : AccessibilitySpace
    , name : String
    , visibility : VisibilitySpace
    }


type alias RequestSpaceJoin =
    { space : NameOrIdentifierNameSpaceIdentifierSpace
    }


type alias RequestSpaceList =
    { order : List (OrderByCategorySpaceOrderCategory)
    }


type alias Reservation =
    { desk : IdentifierDesk
    , id : IdentifierReservation
    , status : StatusReservation
    , timebegin : String
    , timeend : String
    , user : IdentifierUser
    }


type alias ResponseDeskCreate =
    { id : IdentifierDesk
    }


type alias ResponseDeskList =
    { desks : List (DeskWithInfo)
    }


type alias ResponseLogin =
    { jwt : String
    }


type alias ResponseProfile =
    { email : String
    , id : String
    , name : String
    }


type alias ResponseReservationCancel =
    { unit : List (Maybe AnyType)
    }


type alias ResponseReservationCreate =
    { id : IdentifierReservation
    }


type alias ResponseSpaceCreate =
    { id : IdentifierSpace
    }


type alias ResponseSpaceJoin =
    { unit : List (Maybe AnyType)
    }


type alias ResponseSpaceList =
    { spaces : List (Space)
    }


type alias Space =
    { id : IdentifierSpace
    , name : String
    }


type SpaceOrderCategory
    = SpaceOrderCategoryId
    | SpaceOrderCategoryName


spaceOrderCategoryVariants : List SpaceOrderCategory
spaceOrderCategoryVariants =
    [ SpaceOrderCategoryId
    , SpaceOrderCategoryName
    ]


type StaticText
    = StaticTextDeskIsNotAvailableWithinTheGivenTimeWindow


staticTextVariants : List StaticText
staticTextVariants =
    [ StaticTextDeskIsNotAvailableWithinTheGivenTimeWindow
    ]


type StatusReservation
    = StatusReservationPlanned
    | StatusReservationCancelled


statusReservationVariants : List StatusReservation
statusReservationVariants =
    [ StatusReservationPlanned
    , StatusReservationCancelled
    ]


type alias UTCTime =
    { }


type alias Username =
    { }


type VisibilitySpace
    = VisibilitySpaceVisible
    | VisibilitySpaceHidden


visibilitySpaceVariants : List VisibilitySpace
visibilitySpaceVariants =
    [ VisibilitySpaceVisible
    , VisibilitySpaceHidden
    ]


-- ENCODER


stringFromAccessibilitySpace : AccessibilitySpace -> String
stringFromAccessibilitySpace model =
    case model of
        AccessibilitySpaceJoinable ->
            "joinable"

        AccessibilitySpaceInaccessible ->
            "inaccessible"


encodeAccessibilitySpace : AccessibilitySpace -> Json.Encode.Value
encodeAccessibilitySpace =
    Json.Encode.string << stringFromAccessibilitySpace


encodeDesk : Desk -> Json.Encode.Value
encodeDesk =
    encodeObject << encodeDeskPairs


encodeDeskWithTag : ( String, String ) -> Desk -> Json.Encode.Value
encodeDeskWithTag (tagField, tag) model =
    encodeObject (encodeDeskPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeskPairs : Desk -> List EncodedField
encodeDeskPairs model =
    let
        pairs =
            [ encode "id" encodeIdentifierDesk model.id
            , encode "name" Json.Encode.string model.name
            , encode "space" encodeIdentifierSpace model.space
            ]
    in
    pairs


encodeDeskNameWithContext : DeskNameWithContext -> Json.Encode.Value
encodeDeskNameWithContext =
    encodeObject << encodeDeskNameWithContextPairs


encodeDeskNameWithContextWithTag : ( String, String ) -> DeskNameWithContext -> Json.Encode.Value
encodeDeskNameWithContextWithTag (tagField, tag) model =
    encodeObject (encodeDeskNameWithContextPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeskNameWithContextPairs : DeskNameWithContext -> List EncodedField
encodeDeskNameWithContextPairs model =
    let
        pairs =
            [ encode "desk" Json.Encode.string model.desk
            , encode "space" Json.Encode.string model.space
            ]
    in
    pairs


encodeDeskWithInfo : DeskWithInfo -> Json.Encode.Value
encodeDeskWithInfo =
    encodeObject << encodeDeskWithInfoPairs


encodeDeskWithInfoWithTag : ( String, String ) -> DeskWithInfo -> Json.Encode.Value
encodeDeskWithInfoWithTag (tagField, tag) model =
    encodeObject (encodeDeskWithInfoPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeDeskWithInfoPairs : DeskWithInfo -> List EncodedField
encodeDeskWithInfoPairs model =
    let
        pairs =
            [ encode "desk" encodeDesk model.desk
            , encode "reservations" (Json.Encode.list encodeReservation) model.reservations
            ]
    in
    pairs


encodeEmailAddress : EmailAddress -> Json.Encode.Value
encodeEmailAddress =
    encodeObject << encodeEmailAddressPairs


encodeEmailAddressWithTag : ( String, String ) -> EmailAddress -> Json.Encode.Value
encodeEmailAddressWithTag (tagField, tag) model =
    encodeObject (encodeEmailAddressPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeEmailAddressPairs : EmailAddress -> List EncodedField
encodeEmailAddressPairs model =
    let
        pairs =
            ]
    in
    pairs


stringFromErrorBasicAuth : ErrorBasicAuth -> String
stringFromErrorBasicAuth model =
    case model of
        ErrorBasicAuthUsername ->
            "username"

        ErrorBasicAuthPassword ->
            "password"

        ErrorBasicAuthIndefinite ->
            "indefinite"


encodeErrorBasicAuth : ErrorBasicAuth -> Json.Encode.Value
encodeErrorBasicAuth =
    Json.Encode.string << stringFromErrorBasicAuth


encodeErrorParseBodyJson : ErrorParseBodyJson -> Json.Encode.Value
encodeErrorParseBodyJson =
    encodeObject << encodeErrorParseBodyJsonPairs


encodeErrorParseBodyJsonWithTag : ( String, String ) -> ErrorParseBodyJson -> Json.Encode.Value
encodeErrorParseBodyJsonWithTag (tagField, tag) model =
    encodeObject (encodeErrorParseBodyJsonPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeErrorParseBodyJsonPairs : ErrorParseBodyJson -> List EncodedField
encodeErrorParseBodyJsonPairs model =
    let
        pairs =
            [ encode "error" Json.Encode.string model.error
            ]
    in
    pairs


encodeIdentifierDesk : IdentifierDesk -> Json.Encode.Value
encodeIdentifierDesk =
    encodeObject << encodeIdentifierDeskPairs


encodeIdentifierDeskWithTag : ( String, String ) -> IdentifierDesk -> Json.Encode.Value
encodeIdentifierDeskWithTag (tagField, tag) model =
    encodeObject (encodeIdentifierDeskPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIdentifierDeskPairs : IdentifierDesk -> List EncodedField
encodeIdentifierDeskPairs model =
    let
        pairs =
            [ encode "unIdentifierDesk" Json.Encode.int model.unIdentifierDesk
            ]
    in
    pairs


encodeIdentifierReservation : IdentifierReservation -> Json.Encode.Value
encodeIdentifierReservation =
    encodeObject << encodeIdentifierReservationPairs


encodeIdentifierReservationWithTag : ( String, String ) -> IdentifierReservation -> Json.Encode.Value
encodeIdentifierReservationWithTag (tagField, tag) model =
    encodeObject (encodeIdentifierReservationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIdentifierReservationPairs : IdentifierReservation -> List EncodedField
encodeIdentifierReservationPairs model =
    let
        pairs =
            [ encode "unIdentifierReservation" Json.Encode.int model.unIdentifierReservation
            ]
    in
    pairs


encodeIdentifierSpace : IdentifierSpace -> Json.Encode.Value
encodeIdentifierSpace =
    encodeObject << encodeIdentifierSpacePairs


encodeIdentifierSpaceWithTag : ( String, String ) -> IdentifierSpace -> Json.Encode.Value
encodeIdentifierSpaceWithTag (tagField, tag) model =
    encodeObject (encodeIdentifierSpacePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIdentifierSpacePairs : IdentifierSpace -> List EncodedField
encodeIdentifierSpacePairs model =
    let
        pairs =
            [ encode "unIdentifierSpace" Json.Encode.int model.unIdentifierSpace
            ]
    in
    pairs


encodeIdentifierUser : IdentifierUser -> Json.Encode.Value
encodeIdentifierUser =
    encodeObject << encodeIdentifierUserPairs


encodeIdentifierUserWithTag : ( String, String ) -> IdentifierUser -> Json.Encode.Value
encodeIdentifierUserWithTag (tagField, tag) model =
    encodeObject (encodeIdentifierUserPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIdentifierUserPairs : IdentifierUser -> List EncodedField
encodeIdentifierUserPairs model =
    let
        pairs =
            [ encode "unIdentifierUser" Json.Encode.int model.unIdentifierUser
            ]
    in
    pairs


encodeIntervalUTCTime : IntervalUTCTime -> Json.Encode.Value
encodeIntervalUTCTime =
    encodeObject << encodeIntervalUTCTimePairs


encodeIntervalUTCTimeWithTag : ( String, String ) -> IntervalUTCTime -> Json.Encode.Value
encodeIntervalUTCTimeWithTag (tagField, tag) model =
    encodeObject (encodeIntervalUTCTimePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeIntervalUTCTimePairs : IntervalUTCTime -> List EncodedField
encodeIntervalUTCTimePairs model =
    let
        pairs =
            [ encode "end" Json.Encode.string model.end
            , encode "start" Json.Encode.string model.start
            ]
    in
    pairs


encodeJWT : JWT -> Json.Encode.Value
encodeJWT =
    encodeObject << encodeJWTPairs


encodeJWTWithTag : ( String, String ) -> JWT -> Json.Encode.Value
encodeJWTWithTag (tagField, tag) model =
    encodeObject (encodeJWTPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeJWTPairs : JWT -> List EncodedField
encodeJWTPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeNameOrIdentifierDeskNameWithContextIdentifierDesk : NameOrIdentifierDeskNameWithContextIdentifierDesk -> Json.Encode.Value
encodeNameOrIdentifierDeskNameWithContextIdentifierDesk model =
    case model of
        NameOrIdentifierDeskNameWithContextIdentifierDeskNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf subModel ->
            encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf subModel


        NameOrIdentifierDeskNameWithContextIdentifierDeskNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 subModel ->
            encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 subModel




encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf -> Json.Encode.Value
encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf =
    encodeObject << encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfPairs


encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfWithTag : ( String, String ) -> NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf -> Json.Encode.Value
encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfWithTag (tagField, tag) model =
    encodeObject (encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfPairs : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf -> List EncodedField
encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfPairs model =
    let
        pairs =
            [ encode "tag" encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag model.tag
            , encode "value" encodeDeskNameWithContext model.value
            ]
    in
    pairs

stringFromNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag -> String
stringFromNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag model =
    case model of
        NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagName ->
            "name"


encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag -> Json.Encode.Value
encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag =
    Json.Encode.string << stringFromNameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag



encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 -> Json.Encode.Value
encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 =
    encodeObject << encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Pairs


encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1WithTag : ( String, String ) -> NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 -> Json.Encode.Value
encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1WithTag (tagField, tag) model =
    encodeObject (encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Pairs : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 -> List EncodedField
encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Pairs model =
    let
        pairs =
            [ encode "tag" encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag model.tag
            , encode "value" encodeIdentifierDesk model.value
            ]
    in
    pairs

stringFromNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag -> String
stringFromNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag model =
    case model of
        NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagIdentifier ->
            "identifier"


encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag : NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag -> Json.Encode.Value
encodeNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag =
    Json.Encode.string << stringFromNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag



encodeNameOrIdentifierNameSpaceIdentifierSpace : NameOrIdentifierNameSpaceIdentifierSpace -> Json.Encode.Value
encodeNameOrIdentifierNameSpaceIdentifierSpace model =
    case model of
        NameOrIdentifierNameSpaceIdentifierSpaceNameOrIdentifierNameSpaceIdentifierSpaceOneOf subModel ->
            encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf subModel


        NameOrIdentifierNameSpaceIdentifierSpaceNameOrIdentifierNameSpaceIdentifierSpaceOneOf1 subModel ->
            encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1 subModel




encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf : NameOrIdentifierNameSpaceIdentifierSpaceOneOf -> Json.Encode.Value
encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf =
    encodeObject << encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfPairs


encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfWithTag : ( String, String ) -> NameOrIdentifierNameSpaceIdentifierSpaceOneOf -> Json.Encode.Value
encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfWithTag (tagField, tag) model =
    encodeObject (encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfPairs : NameOrIdentifierNameSpaceIdentifierSpaceOneOf -> List EncodedField
encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfPairs model =
    let
        pairs =
            [ encode "tag" encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfTag model.tag
            , encode "value" Json.Encode.string model.value
            ]
    in
    pairs

stringFromNameOrIdentifierNameSpaceIdentifierSpaceOneOfTag : NameOrIdentifierNameSpaceIdentifierSpaceOneOfTag -> String
stringFromNameOrIdentifierNameSpaceIdentifierSpaceOneOfTag model =
    case model of
        NameOrIdentifierNameSpaceIdentifierSpaceOneOfTagName ->
            "name"


encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfTag : NameOrIdentifierNameSpaceIdentifierSpaceOneOfTag -> Json.Encode.Value
encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOfTag =
    Json.Encode.string << stringFromNameOrIdentifierNameSpaceIdentifierSpaceOneOfTag



encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1 : NameOrIdentifierNameSpaceIdentifierSpaceOneOf1 -> Json.Encode.Value
encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1 =
    encodeObject << encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Pairs


encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1WithTag : ( String, String ) -> NameOrIdentifierNameSpaceIdentifierSpaceOneOf1 -> Json.Encode.Value
encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1WithTag (tagField, tag) model =
    encodeObject (encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Pairs model ++ [ encode tagField Json.Encode.string tag ])


encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Pairs : NameOrIdentifierNameSpaceIdentifierSpaceOneOf1 -> List EncodedField
encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Pairs model =
    let
        pairs =
            [ encode "tag" encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag model.tag
            , encode "value" encodeIdentifierSpace model.value
            ]
    in
    pairs

stringFromNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag : NameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag -> String
stringFromNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag model =
    case model of
        NameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagIdentifier ->
            "identifier"


encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag : NameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag -> Json.Encode.Value
encodeNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag =
    Json.Encode.string << stringFromNameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag



encodeOpenAPI : OpenAPI -> Json.Encode.Value
encodeOpenAPI =
    encodeObject << encodeOpenAPIPairs


encodeOpenAPIWithTag : ( String, String ) -> OpenAPI -> Json.Encode.Value
encodeOpenAPIWithTag (tagField, tag) model =
    encodeObject (encodeOpenAPIPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOpenAPIPairs : OpenAPI -> List EncodedField
encodeOpenAPIPairs model =
    let
        pairs =
            ]
    in
    pairs


encodeOrderByCategorySpaceOrderCategory : OrderByCategorySpaceOrderCategory -> Json.Encode.Value
encodeOrderByCategorySpaceOrderCategory =
    encodeObject << encodeOrderByCategorySpaceOrderCategoryPairs


encodeOrderByCategorySpaceOrderCategoryWithTag : ( String, String ) -> OrderByCategorySpaceOrderCategory -> Json.Encode.Value
encodeOrderByCategorySpaceOrderCategoryWithTag (tagField, tag) model =
    encodeObject (encodeOrderByCategorySpaceOrderCategoryPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeOrderByCategorySpaceOrderCategoryPairs : OrderByCategorySpaceOrderCategory -> List EncodedField
encodeOrderByCategorySpaceOrderCategoryPairs model =
    let
        pairs =
            [ encode "category" encodeSpaceOrderCategory model.category
            , encode "order" encodeOrder model.order
            ]
    in
    pairs


stringFromOrder_ : Order_ -> String
stringFromOrder_ model =
    case model of
        Order_Ascending ->
            "ascending"

        Order_Descending ->
            "descending"


encodeOrder : Order_ -> Json.Encode.Value
encodeOrder =
    Json.Encode.string << stringFromOrder_


encodeRequestDeskCreate : RequestDeskCreate -> Json.Encode.Value
encodeRequestDeskCreate =
    encodeObject << encodeRequestDeskCreatePairs


encodeRequestDeskCreateWithTag : ( String, String ) -> RequestDeskCreate -> Json.Encode.Value
encodeRequestDeskCreateWithTag (tagField, tag) model =
    encodeObject (encodeRequestDeskCreatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestDeskCreatePairs : RequestDeskCreate -> List EncodedField
encodeRequestDeskCreatePairs model =
    let
        pairs =
            [ encode "name" Json.Encode.string model.name
            , encode "space" encodeNameOrIdentifierNameSpaceIdentifierSpace model.space
            ]
    in
    pairs


encodeRequestDeskList : RequestDeskList -> Json.Encode.Value
encodeRequestDeskList =
    encodeObject << encodeRequestDeskListPairs


encodeRequestDeskListWithTag : ( String, String ) -> RequestDeskList -> Json.Encode.Value
encodeRequestDeskListWithTag (tagField, tag) model =
    encodeObject (encodeRequestDeskListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestDeskListPairs : RequestDeskList -> List EncodedField
encodeRequestDeskListPairs model =
    let
        pairs =
            [ encode "space" encodeNameOrIdentifierNameSpaceIdentifierSpace model.space
            , maybeEncode "time-begin" Json.Encode.string model.timebegin
            , maybeEncode "time-end" Json.Encode.string model.timeend
            ]
    in
    pairs


encodeRequestRegister : RequestRegister -> Json.Encode.Value
encodeRequestRegister =
    encodeObject << encodeRequestRegisterPairs


encodeRequestRegisterWithTag : ( String, String ) -> RequestRegister -> Json.Encode.Value
encodeRequestRegisterWithTag (tagField, tag) model =
    encodeObject (encodeRequestRegisterPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestRegisterPairs : RequestRegister -> List EncodedField
encodeRequestRegisterPairs model =
    let
        pairs =
            [ encode "email" Json.Encode.string model.email
            , encode "email-visible" Json.Encode.bool model.emailvisible
            , encode "name" Json.Encode.string model.name
            , encode "password" Json.Encode.string model.password
            ]
    in
    pairs


encodeRequestReservationCancel : RequestReservationCancel -> Json.Encode.Value
encodeRequestReservationCancel =
    encodeObject << encodeRequestReservationCancelPairs


encodeRequestReservationCancelWithTag : ( String, String ) -> RequestReservationCancel -> Json.Encode.Value
encodeRequestReservationCancelWithTag (tagField, tag) model =
    encodeObject (encodeRequestReservationCancelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestReservationCancelPairs : RequestReservationCancel -> List EncodedField
encodeRequestReservationCancelPairs model =
    let
        pairs =
            [ encode "id" encodeIdentifierReservation model.id
            ]
    in
    pairs


encodeRequestReservationCreate : RequestReservationCreate -> Json.Encode.Value
encodeRequestReservationCreate =
    encodeObject << encodeRequestReservationCreatePairs


encodeRequestReservationCreateWithTag : ( String, String ) -> RequestReservationCreate -> Json.Encode.Value
encodeRequestReservationCreateWithTag (tagField, tag) model =
    encodeObject (encodeRequestReservationCreatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestReservationCreatePairs : RequestReservationCreate -> List EncodedField
encodeRequestReservationCreatePairs model =
    let
        pairs =
            [ encode "desk" encodeNameOrIdentifierDeskNameWithContextIdentifierDesk model.desk
            , encode "time-window" encodeIntervalUTCTime model.timewindow
            ]
    in
    pairs


encodeRequestSpaceCreate : RequestSpaceCreate -> Json.Encode.Value
encodeRequestSpaceCreate =
    encodeObject << encodeRequestSpaceCreatePairs


encodeRequestSpaceCreateWithTag : ( String, String ) -> RequestSpaceCreate -> Json.Encode.Value
encodeRequestSpaceCreateWithTag (tagField, tag) model =
    encodeObject (encodeRequestSpaceCreatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestSpaceCreatePairs : RequestSpaceCreate -> List EncodedField
encodeRequestSpaceCreatePairs model =
    let
        pairs =
            [ encode "accessibility" encodeAccessibilitySpace model.accessibility
            , encode "name" Json.Encode.string model.name
            , encode "visibility" encodeVisibilitySpace model.visibility
            ]
    in
    pairs


encodeRequestSpaceJoin : RequestSpaceJoin -> Json.Encode.Value
encodeRequestSpaceJoin =
    encodeObject << encodeRequestSpaceJoinPairs


encodeRequestSpaceJoinWithTag : ( String, String ) -> RequestSpaceJoin -> Json.Encode.Value
encodeRequestSpaceJoinWithTag (tagField, tag) model =
    encodeObject (encodeRequestSpaceJoinPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestSpaceJoinPairs : RequestSpaceJoin -> List EncodedField
encodeRequestSpaceJoinPairs model =
    let
        pairs =
            [ encode "space" encodeNameOrIdentifierNameSpaceIdentifierSpace model.space
            ]
    in
    pairs


encodeRequestSpaceList : RequestSpaceList -> Json.Encode.Value
encodeRequestSpaceList =
    encodeObject << encodeRequestSpaceListPairs


encodeRequestSpaceListWithTag : ( String, String ) -> RequestSpaceList -> Json.Encode.Value
encodeRequestSpaceListWithTag (tagField, tag) model =
    encodeObject (encodeRequestSpaceListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeRequestSpaceListPairs : RequestSpaceList -> List EncodedField
encodeRequestSpaceListPairs model =
    let
        pairs =
            [ encode "order" (Json.Encode.list encodeOrderByCategorySpaceOrderCategory) model.order
            ]
    in
    pairs


encodeReservation : Reservation -> Json.Encode.Value
encodeReservation =
    encodeObject << encodeReservationPairs


encodeReservationWithTag : ( String, String ) -> Reservation -> Json.Encode.Value
encodeReservationWithTag (tagField, tag) model =
    encodeObject (encodeReservationPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeReservationPairs : Reservation -> List EncodedField
encodeReservationPairs model =
    let
        pairs =
            [ encode "desk" encodeIdentifierDesk model.desk
            , encode "id" encodeIdentifierReservation model.id
            , encode "status" encodeStatusReservation model.status
            , encode "time-begin" Json.Encode.string model.timebegin
            , encode "time-end" Json.Encode.string model.timeend
            , encode "user" encodeIdentifierUser model.user
            ]
    in
    pairs


encodeResponseDeskCreate : ResponseDeskCreate -> Json.Encode.Value
encodeResponseDeskCreate =
    encodeObject << encodeResponseDeskCreatePairs


encodeResponseDeskCreateWithTag : ( String, String ) -> ResponseDeskCreate -> Json.Encode.Value
encodeResponseDeskCreateWithTag (tagField, tag) model =
    encodeObject (encodeResponseDeskCreatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseDeskCreatePairs : ResponseDeskCreate -> List EncodedField
encodeResponseDeskCreatePairs model =
    let
        pairs =
            [ encode "id" encodeIdentifierDesk model.id
            ]
    in
    pairs


encodeResponseDeskList : ResponseDeskList -> Json.Encode.Value
encodeResponseDeskList =
    encodeObject << encodeResponseDeskListPairs


encodeResponseDeskListWithTag : ( String, String ) -> ResponseDeskList -> Json.Encode.Value
encodeResponseDeskListWithTag (tagField, tag) model =
    encodeObject (encodeResponseDeskListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseDeskListPairs : ResponseDeskList -> List EncodedField
encodeResponseDeskListPairs model =
    let
        pairs =
            [ encode "desks" (Json.Encode.list encodeDeskWithInfo) model.desks
            ]
    in
    pairs


encodeResponseLogin : ResponseLogin -> Json.Encode.Value
encodeResponseLogin =
    encodeObject << encodeResponseLoginPairs


encodeResponseLoginWithTag : ( String, String ) -> ResponseLogin -> Json.Encode.Value
encodeResponseLoginWithTag (tagField, tag) model =
    encodeObject (encodeResponseLoginPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseLoginPairs : ResponseLogin -> List EncodedField
encodeResponseLoginPairs model =
    let
        pairs =
            [ encode "jwt" Json.Encode.string model.jwt
            ]
    in
    pairs


encodeResponseProfile : ResponseProfile -> Json.Encode.Value
encodeResponseProfile =
    encodeObject << encodeResponseProfilePairs


encodeResponseProfileWithTag : ( String, String ) -> ResponseProfile -> Json.Encode.Value
encodeResponseProfileWithTag (tagField, tag) model =
    encodeObject (encodeResponseProfilePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseProfilePairs : ResponseProfile -> List EncodedField
encodeResponseProfilePairs model =
    let
        pairs =
            [ encode "email" Json.Encode.string model.email
            , encode "id" Json.Encode.string model.id
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


encodeResponseReservationCancel : ResponseReservationCancel -> Json.Encode.Value
encodeResponseReservationCancel =
    encodeObject << encodeResponseReservationCancelPairs


encodeResponseReservationCancelWithTag : ( String, String ) -> ResponseReservationCancel -> Json.Encode.Value
encodeResponseReservationCancelWithTag (tagField, tag) model =
    encodeObject (encodeResponseReservationCancelPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseReservationCancelPairs : ResponseReservationCancel -> List EncodedField
encodeResponseReservationCancelPairs model =
    let
        pairs =
            [ encode "unit" (Json.Encode.list encodeAnyType) model.unit
            ]
    in
    pairs


encodeResponseReservationCreate : ResponseReservationCreate -> Json.Encode.Value
encodeResponseReservationCreate =
    encodeObject << encodeResponseReservationCreatePairs


encodeResponseReservationCreateWithTag : ( String, String ) -> ResponseReservationCreate -> Json.Encode.Value
encodeResponseReservationCreateWithTag (tagField, tag) model =
    encodeObject (encodeResponseReservationCreatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseReservationCreatePairs : ResponseReservationCreate -> List EncodedField
encodeResponseReservationCreatePairs model =
    let
        pairs =
            [ encode "id" encodeIdentifierReservation model.id
            ]
    in
    pairs


encodeResponseSpaceCreate : ResponseSpaceCreate -> Json.Encode.Value
encodeResponseSpaceCreate =
    encodeObject << encodeResponseSpaceCreatePairs


encodeResponseSpaceCreateWithTag : ( String, String ) -> ResponseSpaceCreate -> Json.Encode.Value
encodeResponseSpaceCreateWithTag (tagField, tag) model =
    encodeObject (encodeResponseSpaceCreatePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseSpaceCreatePairs : ResponseSpaceCreate -> List EncodedField
encodeResponseSpaceCreatePairs model =
    let
        pairs =
            [ encode "id" encodeIdentifierSpace model.id
            ]
    in
    pairs


encodeResponseSpaceJoin : ResponseSpaceJoin -> Json.Encode.Value
encodeResponseSpaceJoin =
    encodeObject << encodeResponseSpaceJoinPairs


encodeResponseSpaceJoinWithTag : ( String, String ) -> ResponseSpaceJoin -> Json.Encode.Value
encodeResponseSpaceJoinWithTag (tagField, tag) model =
    encodeObject (encodeResponseSpaceJoinPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseSpaceJoinPairs : ResponseSpaceJoin -> List EncodedField
encodeResponseSpaceJoinPairs model =
    let
        pairs =
            [ encode "unit" (Json.Encode.list encodeAnyType) model.unit
            ]
    in
    pairs


encodeResponseSpaceList : ResponseSpaceList -> Json.Encode.Value
encodeResponseSpaceList =
    encodeObject << encodeResponseSpaceListPairs


encodeResponseSpaceListWithTag : ( String, String ) -> ResponseSpaceList -> Json.Encode.Value
encodeResponseSpaceListWithTag (tagField, tag) model =
    encodeObject (encodeResponseSpaceListPairs model ++ [ encode tagField Json.Encode.string tag ])


encodeResponseSpaceListPairs : ResponseSpaceList -> List EncodedField
encodeResponseSpaceListPairs model =
    let
        pairs =
            [ encode "spaces" (Json.Encode.list encodeSpace) model.spaces
            ]
    in
    pairs


encodeSpace : Space -> Json.Encode.Value
encodeSpace =
    encodeObject << encodeSpacePairs


encodeSpaceWithTag : ( String, String ) -> Space -> Json.Encode.Value
encodeSpaceWithTag (tagField, tag) model =
    encodeObject (encodeSpacePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeSpacePairs : Space -> List EncodedField
encodeSpacePairs model =
    let
        pairs =
            [ encode "id" encodeIdentifierSpace model.id
            , encode "name" Json.Encode.string model.name
            ]
    in
    pairs


stringFromSpaceOrderCategory : SpaceOrderCategory -> String
stringFromSpaceOrderCategory model =
    case model of
        SpaceOrderCategoryId ->
            "id"

        SpaceOrderCategoryName ->
            "name"


encodeSpaceOrderCategory : SpaceOrderCategory -> Json.Encode.Value
encodeSpaceOrderCategory =
    Json.Encode.string << stringFromSpaceOrderCategory


stringFromStaticText : StaticText -> String
stringFromStaticText model =
    case model of
        StaticTextDeskIsNotAvailableWithinTheGivenTimeWindow ->
            "Desk is not available within the given time window."


encodeStaticText : StaticText -> Json.Encode.Value
encodeStaticText =
    Json.Encode.string << stringFromStaticText


stringFromStatusReservation : StatusReservation -> String
stringFromStatusReservation model =
    case model of
        StatusReservationPlanned ->
            "planned"

        StatusReservationCancelled ->
            "cancelled"


encodeStatusReservation : StatusReservation -> Json.Encode.Value
encodeStatusReservation =
    Json.Encode.string << stringFromStatusReservation


encodeUTCTime : UTCTime -> Json.Encode.Value
encodeUTCTime =
    encodeObject << encodeUTCTimePairs


encodeUTCTimeWithTag : ( String, String ) -> UTCTime -> Json.Encode.Value
encodeUTCTimeWithTag (tagField, tag) model =
    encodeObject (encodeUTCTimePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUTCTimePairs : UTCTime -> List EncodedField
encodeUTCTimePairs model =
    let
        pairs =
            ]
    in
    pairs


encodeUsername : Username -> Json.Encode.Value
encodeUsername =
    encodeObject << encodeUsernamePairs


encodeUsernameWithTag : ( String, String ) -> Username -> Json.Encode.Value
encodeUsernameWithTag (tagField, tag) model =
    encodeObject (encodeUsernamePairs model ++ [ encode tagField Json.Encode.string tag ])


encodeUsernamePairs : Username -> List EncodedField
encodeUsernamePairs model =
    let
        pairs =
            ]
    in
    pairs


stringFromVisibilitySpace : VisibilitySpace -> String
stringFromVisibilitySpace model =
    case model of
        VisibilitySpaceVisible ->
            "visible"

        VisibilitySpaceHidden ->
            "hidden"


encodeVisibilitySpace : VisibilitySpace -> Json.Encode.Value
encodeVisibilitySpace =
    Json.Encode.string << stringFromVisibilitySpace


-- DECODER


accessibilitySpaceDecoder : Json.Decode.Decoder AccessibilitySpace
accessibilitySpaceDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "joinable" ->
                        Json.Decode.succeed AccessibilitySpaceJoinable

                    "inaccessible" ->
                        Json.Decode.succeed AccessibilitySpaceInaccessible

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


deskDecoder : Json.Decode.Decoder Desk
deskDecoder =
    Json.Decode.succeed Desk
        |> decode "id" identifierDeskDecoder 
        |> decode "name" Json.Decode.string 
        |> decode "space" identifierSpaceDecoder 


deskNameWithContextDecoder : Json.Decode.Decoder DeskNameWithContext
deskNameWithContextDecoder =
    Json.Decode.succeed DeskNameWithContext
        |> decode "desk" Json.Decode.string 
        |> decode "space" Json.Decode.string 


deskWithInfoDecoder : Json.Decode.Decoder DeskWithInfo
deskWithInfoDecoder =
    Json.Decode.succeed DeskWithInfo
        |> decode "desk" deskDecoder 
        |> decode "reservations" (Json.Decode.list reservationDecoder) 


emailAddressDecoder : Json.Decode.Decoder EmailAddress
emailAddressDecoder =
    Json.Decode.succeed EmailAddress


errorBasicAuthDecoder : Json.Decode.Decoder ErrorBasicAuth
errorBasicAuthDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "username" ->
                        Json.Decode.succeed ErrorBasicAuthUsername

                    "password" ->
                        Json.Decode.succeed ErrorBasicAuthPassword

                    "indefinite" ->
                        Json.Decode.succeed ErrorBasicAuthIndefinite

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


errorParseBodyJsonDecoder : Json.Decode.Decoder ErrorParseBodyJson
errorParseBodyJsonDecoder =
    Json.Decode.succeed ErrorParseBodyJson
        |> decode "error" Json.Decode.string 


identifierDeskDecoder : Json.Decode.Decoder IdentifierDesk
identifierDeskDecoder =
    Json.Decode.succeed IdentifierDesk
        |> decode "unIdentifierDesk" Json.Decode.int 


identifierReservationDecoder : Json.Decode.Decoder IdentifierReservation
identifierReservationDecoder =
    Json.Decode.succeed IdentifierReservation
        |> decode "unIdentifierReservation" Json.Decode.int 


identifierSpaceDecoder : Json.Decode.Decoder IdentifierSpace
identifierSpaceDecoder =
    Json.Decode.succeed IdentifierSpace
        |> decode "unIdentifierSpace" Json.Decode.int 


identifierUserDecoder : Json.Decode.Decoder IdentifierUser
identifierUserDecoder =
    Json.Decode.succeed IdentifierUser
        |> decode "unIdentifierUser" Json.Decode.int 


intervalUTCTimeDecoder : Json.Decode.Decoder IntervalUTCTime
intervalUTCTimeDecoder =
    Json.Decode.succeed IntervalUTCTime
        |> decode "end" Json.Decode.string 
        |> decode "start" Json.Decode.string 


jWTDecoder : Json.Decode.Decoder JWT
jWTDecoder =
    Json.Decode.succeed JWT


nameOrIdentifierDeskNameWithContextIdentifierDeskDecoder : Json.Decode.Decoder NameOrIdentifierDeskNameWithContextIdentifierDesk
nameOrIdentifierDeskNameWithContextIdentifierDeskDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map NameOrIdentifierDeskNameWithContextIdentifierDeskNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfDecoder
        , Json.Decode.map NameOrIdentifierDeskNameWithContextIdentifierDeskNameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1 nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Decoder
        ]



nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfDecoder : Json.Decode.Decoder NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf
nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfDecoder =
    Json.Decode.succeed NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf
        |> decode "tag" nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagDecoder 
        |> decode "value" deskNameWithContextDecoder 


nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagDecoder : Json.Decode.Decoder NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTag
nameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "name" ->
                        Json.Decode.succeed NameOrIdentifierDeskNameWithContextIdentifierDeskOneOfTagName

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Decoder : Json.Decode.Decoder NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1
nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Decoder =
    Json.Decode.succeed NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1
        |> decode "tag" nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagDecoder 
        |> decode "value" identifierDeskDecoder 


nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagDecoder : Json.Decode.Decoder NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1Tag
nameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "identifier" ->
                        Json.Decode.succeed NameOrIdentifierDeskNameWithContextIdentifierDeskOneOf1TagIdentifier

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



nameOrIdentifierNameSpaceIdentifierSpaceDecoder : Json.Decode.Decoder NameOrIdentifierNameSpaceIdentifierSpace
nameOrIdentifierNameSpaceIdentifierSpaceDecoder =
    Json.Decode.oneOf
        [ Json.Decode.map NameOrIdentifierNameSpaceIdentifierSpaceNameOrIdentifierNameSpaceIdentifierSpaceOneOf nameOrIdentifierNameSpaceIdentifierSpaceOneOfDecoder
        , Json.Decode.map NameOrIdentifierNameSpaceIdentifierSpaceNameOrIdentifierNameSpaceIdentifierSpaceOneOf1 nameOrIdentifierNameSpaceIdentifierSpaceOneOf1Decoder
        ]



nameOrIdentifierNameSpaceIdentifierSpaceOneOfDecoder : Json.Decode.Decoder NameOrIdentifierNameSpaceIdentifierSpaceOneOf
nameOrIdentifierNameSpaceIdentifierSpaceOneOfDecoder =
    Json.Decode.succeed NameOrIdentifierNameSpaceIdentifierSpaceOneOf
        |> decode "tag" nameOrIdentifierNameSpaceIdentifierSpaceOneOfTagDecoder 
        |> decode "value" Json.Decode.string 


nameOrIdentifierNameSpaceIdentifierSpaceOneOfTagDecoder : Json.Decode.Decoder NameOrIdentifierNameSpaceIdentifierSpaceOneOfTag
nameOrIdentifierNameSpaceIdentifierSpaceOneOfTagDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "name" ->
                        Json.Decode.succeed NameOrIdentifierNameSpaceIdentifierSpaceOneOfTagName

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



nameOrIdentifierNameSpaceIdentifierSpaceOneOf1Decoder : Json.Decode.Decoder NameOrIdentifierNameSpaceIdentifierSpaceOneOf1
nameOrIdentifierNameSpaceIdentifierSpaceOneOf1Decoder =
    Json.Decode.succeed NameOrIdentifierNameSpaceIdentifierSpaceOneOf1
        |> decode "tag" nameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagDecoder 
        |> decode "value" identifierSpaceDecoder 


nameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagDecoder : Json.Decode.Decoder NameOrIdentifierNameSpaceIdentifierSpaceOneOf1Tag
nameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "identifier" ->
                        Json.Decode.succeed NameOrIdentifierNameSpaceIdentifierSpaceOneOf1TagIdentifier

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )



openAPIDecoder : Json.Decode.Decoder OpenAPI
openAPIDecoder =
    Json.Decode.succeed OpenAPI


orderByCategorySpaceOrderCategoryDecoder : Json.Decode.Decoder OrderByCategorySpaceOrderCategory
orderByCategorySpaceOrderCategoryDecoder =
    Json.Decode.succeed OrderByCategorySpaceOrderCategory
        |> decode "category" spaceOrderCategoryDecoder 
        |> decode "order" orderDecoder 


orderDecoder : Json.Decode.Decoder Order_
orderDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "ascending" ->
                        Json.Decode.succeed Order_Ascending

                    "descending" ->
                        Json.Decode.succeed Order_Descending

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


requestDeskCreateDecoder : Json.Decode.Decoder RequestDeskCreate
requestDeskCreateDecoder =
    Json.Decode.succeed RequestDeskCreate
        |> decode "name" Json.Decode.string 
        |> decode "space" nameOrIdentifierNameSpaceIdentifierSpaceDecoder 


requestDeskListDecoder : Json.Decode.Decoder RequestDeskList
requestDeskListDecoder =
    Json.Decode.succeed RequestDeskList
        |> decode "space" nameOrIdentifierNameSpaceIdentifierSpaceDecoder 
        |> maybeDecode "time-begin" Json.Decode.string Nothing
        |> maybeDecode "time-end" Json.Decode.string Nothing


requestRegisterDecoder : Json.Decode.Decoder RequestRegister
requestRegisterDecoder =
    Json.Decode.succeed RequestRegister
        |> decode "email" Json.Decode.string 
        |> decode "email-visible" Json.Decode.bool 
        |> decode "name" Json.Decode.string 
        |> decode "password" Json.Decode.string 


requestReservationCancelDecoder : Json.Decode.Decoder RequestReservationCancel
requestReservationCancelDecoder =
    Json.Decode.succeed RequestReservationCancel
        |> decode "id" identifierReservationDecoder 


requestReservationCreateDecoder : Json.Decode.Decoder RequestReservationCreate
requestReservationCreateDecoder =
    Json.Decode.succeed RequestReservationCreate
        |> decode "desk" nameOrIdentifierDeskNameWithContextIdentifierDeskDecoder 
        |> decode "time-window" intervalUTCTimeDecoder 


requestSpaceCreateDecoder : Json.Decode.Decoder RequestSpaceCreate
requestSpaceCreateDecoder =
    Json.Decode.succeed RequestSpaceCreate
        |> decode "accessibility" accessibilitySpaceDecoder 
        |> decode "name" Json.Decode.string 
        |> decode "visibility" visibilitySpaceDecoder 


requestSpaceJoinDecoder : Json.Decode.Decoder RequestSpaceJoin
requestSpaceJoinDecoder =
    Json.Decode.succeed RequestSpaceJoin
        |> decode "space" nameOrIdentifierNameSpaceIdentifierSpaceDecoder 


requestSpaceListDecoder : Json.Decode.Decoder RequestSpaceList
requestSpaceListDecoder =
    Json.Decode.succeed RequestSpaceList
        |> decode "order" (Json.Decode.list orderByCategorySpaceOrderCategoryDecoder) 


reservationDecoder : Json.Decode.Decoder Reservation
reservationDecoder =
    Json.Decode.succeed Reservation
        |> decode "desk" identifierDeskDecoder 
        |> decode "id" identifierReservationDecoder 
        |> decode "status" statusReservationDecoder 
        |> decode "time-begin" Json.Decode.string 
        |> decode "time-end" Json.Decode.string 
        |> decode "user" identifierUserDecoder 


responseDeskCreateDecoder : Json.Decode.Decoder ResponseDeskCreate
responseDeskCreateDecoder =
    Json.Decode.succeed ResponseDeskCreate
        |> decode "id" identifierDeskDecoder 


responseDeskListDecoder : Json.Decode.Decoder ResponseDeskList
responseDeskListDecoder =
    Json.Decode.succeed ResponseDeskList
        |> decode "desks" (Json.Decode.list deskWithInfoDecoder) 


responseLoginDecoder : Json.Decode.Decoder ResponseLogin
responseLoginDecoder =
    Json.Decode.succeed ResponseLogin
        |> decode "jwt" Json.Decode.string 


responseProfileDecoder : Json.Decode.Decoder ResponseProfile
responseProfileDecoder =
    Json.Decode.succeed ResponseProfile
        |> decode "email" Json.Decode.string 
        |> decode "id" Json.Decode.string 
        |> decode "name" Json.Decode.string 


responseReservationCancelDecoder : Json.Decode.Decoder ResponseReservationCancel
responseReservationCancelDecoder =
    Json.Decode.succeed ResponseReservationCancel
        |> decode "unit" (Json.Decode.list anyTypeDecoder) 


responseReservationCreateDecoder : Json.Decode.Decoder ResponseReservationCreate
responseReservationCreateDecoder =
    Json.Decode.succeed ResponseReservationCreate
        |> decode "id" identifierReservationDecoder 


responseSpaceCreateDecoder : Json.Decode.Decoder ResponseSpaceCreate
responseSpaceCreateDecoder =
    Json.Decode.succeed ResponseSpaceCreate
        |> decode "id" identifierSpaceDecoder 


responseSpaceJoinDecoder : Json.Decode.Decoder ResponseSpaceJoin
responseSpaceJoinDecoder =
    Json.Decode.succeed ResponseSpaceJoin
        |> decode "unit" (Json.Decode.list anyTypeDecoder) 


responseSpaceListDecoder : Json.Decode.Decoder ResponseSpaceList
responseSpaceListDecoder =
    Json.Decode.succeed ResponseSpaceList
        |> decode "spaces" (Json.Decode.list spaceDecoder) 


spaceDecoder : Json.Decode.Decoder Space
spaceDecoder =
    Json.Decode.succeed Space
        |> decode "id" identifierSpaceDecoder 
        |> decode "name" Json.Decode.string 


spaceOrderCategoryDecoder : Json.Decode.Decoder SpaceOrderCategory
spaceOrderCategoryDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "id" ->
                        Json.Decode.succeed SpaceOrderCategoryId

                    "name" ->
                        Json.Decode.succeed SpaceOrderCategoryName

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


staticTextDecoder : Json.Decode.Decoder StaticText
staticTextDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "Desk is not available within the given time window." ->
                        Json.Decode.succeed StaticTextDeskIsNotAvailableWithinTheGivenTimeWindow

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


statusReservationDecoder : Json.Decode.Decoder StatusReservation
statusReservationDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "planned" ->
                        Json.Decode.succeed StatusReservationPlanned

                    "cancelled" ->
                        Json.Decode.succeed StatusReservationCancelled

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )


uTCTimeDecoder : Json.Decode.Decoder UTCTime
uTCTimeDecoder =
    Json.Decode.succeed UTCTime


usernameDecoder : Json.Decode.Decoder Username
usernameDecoder =
    Json.Decode.succeed Username


visibilitySpaceDecoder : Json.Decode.Decoder VisibilitySpace
visibilitySpaceDecoder =
    Json.Decode.string
        |> Json.Decode.andThen
            (\value ->
                case value of
                    "visible" ->
                        Json.Decode.succeed VisibilitySpaceVisible

                    "hidden" ->
                        Json.Decode.succeed VisibilitySpaceHidden

                    other ->
                        Json.Decode.fail <| "Unknown type: " ++ other
            )




-- HELPER


type alias EncodedField =
    Maybe ( String, Json.Encode.Value )


encodeObject : List EncodedField -> Json.Encode.Value
encodeObject =
    Json.Encode.object << List.filterMap identity


encode : String -> (a -> Json.Encode.Value) -> a -> EncodedField
encode key encoder value =
    Just ( key, encoder value )


encodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
encodeNullable key encoder value =
    Just ( key, Maybe.withDefault Json.Encode.null (Maybe.map encoder value) )


maybeEncode : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncode key encoder =
    Maybe.map (Tuple.pair key << encoder)


maybeEncodeNullable : String -> (a -> Json.Encode.Value) -> Maybe a -> EncodedField
maybeEncodeNullable =
    encodeNullable


decode : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decode key decoder =
    decodeChain (Json.Decode.field key decoder)


decodeLazy : (a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeLazy f key decoder =
    decodeChainLazy f (Json.Decode.field key decoder)


decodeNullable : String -> Json.Decode.Decoder a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
decodeNullable key decoder =
    decodeChain (maybeField key decoder Nothing)


decodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeNullableLazy f key decoder =
    decodeChainLazy f (maybeField key decoder Nothing)


maybeDecode : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecode key decoder fallback =
    -- let's be kind to null-values as well
    decodeChain (maybeField key decoder fallback)


maybeDecodeLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeLazy f key decoder fallback =
    -- let's be kind to null-values as well
    decodeChainLazy f (maybeField key decoder fallback)


maybeDecodeNullable : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a -> b) -> Json.Decode.Decoder b
maybeDecodeNullable key decoder fallback =
    decodeChain (maybeField key decoder fallback)


maybeDecodeNullableLazy : (Maybe a -> c) -> String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
maybeDecodeNullableLazy f key decoder fallback =
    decodeChainLazy f (maybeField key decoder fallback)


maybeField : String -> Json.Decode.Decoder a -> Maybe a -> Json.Decode.Decoder (Maybe a)
maybeField key decoder fallback =
    let
        fieldDecoder =
            Json.Decode.field key Json.Decode.value

        valueDecoder =
            Json.Decode.oneOf [ Json.Decode.map Just decoder, Json.Decode.null fallback ]

        decodeObject rawObject =
            case Json.Decode.decodeValue fieldDecoder rawObject of
                Ok rawValue ->
                    case Json.Decode.decodeValue valueDecoder rawValue of
                        Ok value ->
                            Json.Decode.succeed value

                        Err error ->
                            Json.Decode.fail (Json.Decode.errorToString error)

                Err _ ->
                    Json.Decode.succeed fallback
    in
    Json.Decode.value
        |> Json.Decode.andThen decodeObject


decodeChain : Json.Decode.Decoder a -> Json.Decode.Decoder (a -> b) -> Json.Decode.Decoder b
decodeChain =
    Json.Decode.map2 (|>)


decodeChainLazy : (a -> c) -> Json.Decode.Decoder a -> Json.Decode.Decoder (c -> b) -> Json.Decode.Decoder b
decodeChainLazy f =
    decodeChain << Json.Decode.map f